qplot(cty, data = mpg, geom = "density")
qplot(displ,cty, data = mpg, color = manufacturer)
qplot(displ,cty, data = mpg, color = manufacturer)+geom_smooth(method = "lm")
qplot(displ,cty, data = mpg, facets = . ~ manufacturer) + geom_smooth(method = "lm")
qplot(displ,cty, data = mpg, facets = manufacturer~.) + geom_smooth(method = "lm")
par(mfrow = c(2, 2))
par(mfrow = c(2, 2))
par(mfrow = c(2, 4))
qplot(displ,cty, data = mpg, facets = manufacturer~.) + geom_smooth(method = "lm")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages("ggplot2movies")
library(ggplot2movies)
?ggplot2movies
qplot(Wind, Ozone, data = airquality, stats="quantiles")
7*23
570-(161+14)
570-(161+140)
qplot(displ,cty, data = mpg, facets = manufacturer~.) + geom_smooth(method = "lm")
ggplot(mpg, aes(displ,cty) + geom_smooth(method = "lm")
ggplot(mpg, aes(displ,cty) + geom_smooth(method = "lm")
ggplot(mpg, aes(displ,cty)) + geom_smooth(method = "lm")
ggplot(mpg, aes(displ,cty), geom=c(points,"smooth"))
ggplot(mpg, aes(displ,cty) + geom_point()
)
76.65-1.76
set.seed(1234); par(mar=c(0,0,0,0))
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
x
y
rep(1:3,each=4)
dataFrame <- data.frame(x=x,y=y)
dist(dataFrame)
dataFrame <- data.frame(x=x,y=y)
dist(dataFrame)
dataFrame <- data.frame(x=x,y=y)
dist(dataFrame,method = "manhattan")
dataFrame <- data.frame(x=x,y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering,lab=rep(1:3,each=4),lab.col=rep(1:3,each=4))
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2); x <- as.numeric(hclust$merge)
y <- y[which(x<0)]; x <- x[which(x<0)]; x <- abs(x)
y <- y[order(x)]; x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order], col=lab.col[hclust$order],
srt=90, adj=c(1,0.5), xpd=NA, ... )
}
dataFrame <- data.frame(x=x,y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering,lab=rep(1:3,each=4),lab.col=rep(1:3,each=4))
dataFrame
set.seed(1234); par(mar=c(0,0,0,0))
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
set.seed(1234); par(mar=c(0,0,0,0))
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x,y+0.05,labels=as.character(1:12))
?par
set.seed(12345); par(mar=rep(0.2,4))
dataMatrix <- matrix(rnorm(400),nrow=40)
t(dataMatrix)
image(1:5,1:5,t(dataMatrix)[,nrow(dataMatrix):1])
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
par(mar=rep(0.2,4))
heatmap(dataMatrix)
?image
dataMatrix
dataMatrix[,1]
dataMatrix[3,3]
dataMatrix[3,3:4,4]
nrow(dataMatrix):1
1:nrow(dataMatrix)
image(1:10,1:10,t(dataMatrix)[,10:1])
image(1:10,1:10,t(dataMatrix)[,1:10])
image(1:20,1:20,t(dataMatrix)[,1:20])
par(mar=rep(0.2,4))
heatmap(dataMatrix)
par(mar=rep(0.2,4),nrow(2))
heatmap(dataMatrix)
par(mar=rep(0.2,4),nrow(2))
heatmap(dataMatrix)
image(1:10,1:10,t(dataMatrix)[,10:1])
par(mfrow=c(1,2))
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
? heatmap
set.seed(123)
x <- rnorm(10)
hc <- hclust(dist(x))
dd <- as.dendrogram(hc)
dd.reorder <- reorder(dd, 10:1)
plot(dd, main = "random dendrogram 'dd'")
set.seed(123)
x <- rnorm(10)
hc <- hclust(dist(x))
dd <- as.dendrogram(hc)
plot(dd, main = "random dendrogram 'dd'")
par(mfrow=c(2,2))
plot(dd, main = "random dendrogram 'dd'")
dd.reorder <- reorder(dd, 10:1)
plot(dd, main = "random dendrogram 'dd'")
plot(dd, main = "random dendrogram 'dd'")
plot(dd, main = "random dendrogram 'dd'")
hc
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
image(volcano, col = pal(10))
image(volcano, col = pal(40))
volcano
head(volc)
head(volcano)
x <- rnorm(10000)
y <- rnorm(10000)
plot(x,y)
smoothScatter(x,y)
swirl()
libra
library(ggplot2)
library(swirl)
swirl()
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
5
12
abline(h=.05,col="reen")
abline(h=.05,col="green")
dist(dFsm)
plot(hc)
hc
library(ggplot2movies)
sampleMovies <- movies[1:10,"r1"]
sampleMovies
sampleMovies <- movies[1:100,c("title","rating","r10","votes","mpaa")]
mTitles <- sampleMovies[,1]
movies_data <- data.matrix(sampleMovies[,2:ncol(sampleMovies)])  # transform column 2-5 into a matrix
rownames(movies_data) <- mTitles                  # assign row names
my_palette <- colorRampPalette(c("blue", "white", "orange"))(n = 299)
heatmap.2(movies_data,
cellnote = movies_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")
library(gplots)
library(RColorBrewer)
library(ggplot2movies)
sampleMovies <- movies[1:100,c("title","rating","r10","votes","mpaa")]
mTitles <- sampleMovies[,1]
movies_data <- data.matrix(sampleMovies[,2:ncol(sampleMovies)])  # transform column 2-5 into a matrix
rownames(movies_data) <- mTitles                  # assign row names
my_palette <- colorRampPalette(c("blue", "white", "orange"))(n = 299)
heatmap.2(movies_data,
cellnote = movies_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
library(gplots)
library(RColorBrewer)
library(ggplot2movies)
sampleMovies <- movies[1:100,c("title","rating","r10","votes","mpaa")]
mTitles <- sampleMovies[,1]
movies_data <- data.matrix(sampleMovies[,2:ncol(sampleMovies)])  # transform column 2-5 into a matrix
rownames(movies_data) <- mTitles                  # assign row names
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("blue", "white", "orange"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),   # for red
seq(0.01,0.7,length=100),            # for yellow
seq(0.71,1,length=100))              # for green
heatmap.2(movies_data,
cellnote = movies_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
library(gplots)
library(RColorBrewer)
library(ggplot2movies)
sampleMovies <- movies[1:10,c("title","rating","r10","votes","mpaa")]
mTitles <- sampleMovies[,1]
movies_data <- data.matrix(sampleMovies[,2:ncol(sampleMovies)])  # transform column 2-5 into a matrix
rownames(movies_data) <- mTitles                  # assign row names
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("blue", "white", "orange"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),   # for red
seq(0.01,0.7,length=100),            # for yellow
seq(0.71,1,length=100))              # for green
heatmap.2(movies_data,
cellnote = movies_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
library(gplots)
library(RColorBrewer)
library(ggplot2movies)
sampleMovies <- movies[1:1000,c("title","rating","r10","votes","mpaa")]
mTitles <- sampleMovies[,1]
movies_data <- data.matrix(sampleMovies[,2:ncol(sampleMovies)])  # transform column 2-5 into a matrix
rownames(movies_data) <- mTitles                  # assign row names
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("blue", "white", "orange"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),   # for red
seq(0.01,0.7,length=100),            # for yellow
seq(0.71,1,length=100))              # for green
heatmap.2(movies_data,
cellnote = movies_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
library(gplots)
library(RColorBrewer)
library(ggplot2movies)
sampleMovies <- movies[15000:15100,c("title","rating","r10","votes","mpaa")]
mTitles <- sampleMovies[,1]
movies_data <- data.matrix(sampleMovies[,2:ncol(sampleMovies)])  # transform column 2-5 into a matrix
rownames(movies_data) <- mTitles                  # assign row names
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("blue", "white", "orange"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),   # for red
seq(0.01,0.7,length=100),            # for yellow
seq(0.71,1,length=100))              # for green
heatmap.2(movies_data,
cellnote = movies_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
library(gplots)
library(RColorBrewer)
library(ggplot2movies)
sampleMovies <- movies[15000:15100,c("title","rating","r10","votes","mpaa")]
mTitles <- sampleMovies[,1]
movies_data <- data.matrix(sampleMovies[,2:ncol(sampleMovies)])  # transform column 2-5 into a matrix
rownames(movies_data) <- mTitles                  # assign row names
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),   # for red
seq(0.01,0.7,length=100),            # for yellow
seq(0.71,1,length=100))
heatmap.2(movies_data,
cellnote = movies_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
heatmap(movies_data)
library(ggplot2)
library(reshape2)
data(movies)
movieGenres <- movies[c(18:23)] #subset to 6 genres
library(ggplot2)
library(reshape2)
data(movies)
movieGenres <- movies[c(18:23)] #subset to 6 genres
movieGenres
head(movieGenres)
cor(movieGenres)
melt(cor(movieGenres))
m <-melt(cor(movieGenres))
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p
movieGenres
library(gplots)
library(RColorBrewer)
library(ggplot2movies)
library(ggplot2)
library(reshape2)
data(movies)
movieGenres <- movies[c(18:23)] #subset to 6
dim(movieGenres)
head(movieGenres)
library(ggplot2)
library(reshape2)
data(movies)
movieGenres <- movies[,c(18:23)]
dim(movieGenres)
head(movieGenres)
cor(movieGenres)
typeof(cor(movieGenres))
dim(cor(movieGenres))
setwd("C:/00_Datos/00_trabajo/02_Biblio/04_Data_Science/coursera/DataScienceSpecialization/05_ReproducibleResearch/RepData_PeerAssessment1")
activ <- read.csv("activity,csv",header = TRUE, sep = ",")
activ <- activ[complete.cases(activ),]
activ <- read.csv("activity.csv",header = TRUE, sep = ",")
activ <- activ[complete.cases(activ),]
View(activ)
View(activ)
dailyActiv <- data.frame(aggregate(activ$steps, by=list(activ$date), FUN=sum))
colnames(dailyActiv)<- c("date","totalSteps")
# build plot
plot(dailyActiv$date,dailyActiv$totalSteps, col="red", type="l",
xlab="", ylab="Total steps", main="Total steps per day")
dev.copy(png, file="instructions_fig/plot1.png", width=480, height=480)
dev.off()
View(dailyActiv)
View(dailyActiv)
dailyActiv <- data.frame(aggregate(activ$steps, by=list(activ$date), FUN=sum))
colnames(dailyActiv)<- c("date","totalSteps")
# build plot
plot(dailyActiv$date,dailyActiv$totalSteps, col="red",
xlab="", ylab="Total steps", main="Total steps per day")
dev.copy(png, file="instructions_fig/plot1.png", width=480, height=480)
dev.off()
hist(dailyActiv$totalSteps)
hist(
dailyActiv$totalSteps,
col = "blue",
main = "Total number of steps taken per day",
xlab = "Total number of steps taken per day",
breaks = 20
)
hist(
dailyActiv$totalSteps,
col = "blue",
main = "Daily activity",
xlab = "Total number of steps taken per day",
breaks = 20
)
hist(
dailyActiv$totalSteps,
col = "blue",
main = "Daily activity",
xlab = "Total number of steps taken per day",
breaks = 53
)
hist(
dailyActiv$totalSteps,
col = "grey",
main = "Daily activity",
xlab = "Total number of steps taken per day",
breaks = 53 # number of days
)
View(activ)
View(activ)
intervalActiv <- data.frame(aggregate(activ$steps, by=list(activ$interval), FUN=mean))
colnames(intervalActiv)<- c("interval","meanSteps")
#explore dataset
head(intervalActiv)
intervalActiv <- data.frame(aggregate(activ$steps, by=list(activ$interval), FUN=mean))
colnames(intervalActiv)<- c("interval","meanSteps")
#explore dataset
head(intervalActiv)
plot(intervalActiv$interval,intervalActiv$meanSteps, col="red", type="l",
xlab="", ylab="avg num of steps", main="average daily activity pattern")
plot(intervalActiv$interval,intervalActiv$meanSteps, col="red", type="l",
xlab="5-min interval", ylab="avg num of steps", main="average daily activity pattern")
intervalActiv[max(intervalActiv$meanSteps),]
max(intervalActiv)
max(intervalActiv[2])
intervalActiv[max(intervalActiv[2]),]
max(intervalActiv[2])
intervalActiv[ , max(intervalActiv[2])]
intervalActiv[ max(intervalActiv[2]), ]
intervalActiv[intervalActiv$meanSteps == max(intervalActiv[2]), ]
intervalActiv[intervalActiv$meanSteps == max(intervalActiv[2]), intervalActiv$interval]
intervalActiv[intervalActiv$meanSteps == max(intervalActiv[2]), intervalActiv[1]]
intervalActiv[intervalActiv$meanSteps == max(intervalActiv[2]), ]
intervalActiv[intervalActiv$meanSteps == max(intervalActiv[2]), ]
activ <- read.csv("activity.csv",header = TRUE, sep = ",")
activNull <- activ[is.na(activ$steps)]
activNull <- activ[is.na(activ$steps),]
head(activNull)
View(intervalActiv)
View(intervalActiv)
newactivity <- merge(activ, intervalActiv, by = 'interval', all.y = F)
head(newactivity)
nrow(activNull)
fillActiv <- merge(activ, intervalActiv, by = 'interval', all.y = F)
fillActiv$steps[is.na(fillActiv$steps)] <- fillActiv$meanSteps[is.na(fillActiv$steps)]
head(fillActiv)
fillActiv <- merge(activ, intervalActiv, by = 'interval', all.y = F)
head(fillActiv)
fillActiv$steps[is.na(fillActiv$steps)] <- round(fillActiv$meanSteps[is.na(fillActiv$steps)])
head(fillActiv)
head(activ)
head(fillActiv)
fillActiv <- fillActiv[c(2,3,1)]
head(fillActiv)
View(fillActiv)
View(fillActiv)
dailyActiv2 <- data.frame(aggregate(fillActiv$steps, by=list(fillActiv$date), FUN=sum))
colnames(dailyActiv2)<- c("date","totalSteps")
hist(
dailyActiv2$totalSteps,
col = "green",
main = "Daily activity with NAs removed",
xlab = "Total number of steps taken per day",
breaks = 53 # number of days
)
fillActiv$week <- ifelse(weekdays(activity$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
fillActiv$week <- ifelse(weekdays(fillActiv$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
weekdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
fillActiv$week <- ifelse(weekdays(fillActiv$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
View(fillActiv)
View(fillActiv)
fillActiv$day <- weekdays(as.Date(fillActiv$date))
head(fillActiv)
library(lubridate)
fillActiv$date <- as.Date(fillActiv$date)
fillActiv$wd <- factor(wday(fillActiv$date, label=TRUE))
head(fillActiv)
fillActiv$wend <- as.factor(ifelse(weekday( fillActiv$date) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
fillActiv$wend <- as.factor(ifelse(weekdays( fillActiv$date) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
head(fillActiv)
fillActiv$wend <- as.factor(ifelse(weekdays( fillActiv$date) %in% c("sábado","domingo"), "Weekend", "Weekday"))
head(fillActiv)
fillActiv <- merge(activ, intervalActiv, by = 'interval', all.y = F)
fillActiv$steps[is.na(fillActiv$steps)] <- round(fillActiv$meanSteps[is.na(fillActiv$steps)])
# reorder columns to get a dataframe equal to the original dataset
fillActiv <- fillActiv[c(2,3,1)]
head(fillActiv)
fillActiv$wd <- as.factor(ifelse(weekdays( fillActiv$date) %in% c("sábado","domingo"), "Weekend", "Weekday"))
fillActiv$date <- as.Date(fillActiv$date)
fillActiv$wend <- as.factor(ifelse(weekdays( fillActiv$date) %in% c("sábado","domingo"), "Weekend", "Weekday"))
head(fillActiv)
fillActiv <- merge(activ, intervalActiv, by = 'interval', all.y = F)
fillActiv$steps[is.na(fillActiv$steps)] <- round(fillActiv$meanSteps[is.na(fillActiv$steps)])
# reorder columns to get a dataframe equal to the original dataset
fillActiv <- fillActiv[c(2,3,1)]
head(fillActiv)
fillActiv$date <- as.Date(fillActiv$date)
fillActiv$dayClass <- as.factor(ifelse(weekdays( fillActiv$date) %in% c("sábado","domingo"), "Weekend", "Weekday"))
head(fillActiv)
intervalActivDayClass <- data.frame(aggregate(fillActiv$steps, by=list(fillActiv$interval,fillActiv$dayClass), FUN=mean))
head(intervalActivDayClass)
names(intervalActivDayClass) <- c("interval","dayClass","meanSteps")
head(intervalActivDayClass)
head(intervalActivDayClass[intervalActivDayClass$interval==])
head(intervalActivDayClass[intervalActivDayClass$interval==0])
